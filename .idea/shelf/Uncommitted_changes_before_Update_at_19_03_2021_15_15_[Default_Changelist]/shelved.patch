Index: app/src/main/java/level_page/gameplay/LevelView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package level_page.gameplay;\r\n\r\nimport android.content.Context;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.content.Intent;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.Paint;\r\nimport android.graphics.Rect;\r\nimport android.view.SurfaceHolder;\r\nimport android.view.SurfaceView;\r\nimport android.view.View;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\n\r\nimport com.example.mobechallengeproject.R;\r\n\r\nimport level_page.model.Balle;\r\n\r\nimport end_page.EndActivity;\r\nimport level_page.model.Chrono;\r\n\r\npublic class LevelView extends SurfaceView implements SurfaceHolder.Callback {\r\n\r\n    public static float luminosite;\r\n\r\n    public static LevelGamePlayActivity activity;\r\n\r\n    private static Balle balle = new Balle(25, 500, 500);\r\n\r\n    private LevelThread levelThread;\r\n\r\n    public static float[] gVector = new float[]{0, 0, 0};\r\n\r\n    public static int xMax;\r\n    public static int yMax;\r\n\r\n    private Bitmap map_clean;\r\n    private Bitmap map_high;\r\n    private Bitmap map_defonce;\r\n    private Bitmap current_map;\r\n    private Bitmap bonus;\r\n\r\n    public static boolean restart;\r\n\r\n    private Etat etat;\r\n\r\n    public static LevelGamePlayActivity levelGamePlayActivity;\r\n\r\n    private Chrono chrono = new Chrono();\r\n    private Chrono chronometreGlobal = new Chrono();\r\n\r\n    private String textChrono;\r\n\r\n    public boolean demarre = false;\r\n\r\n    public LevelView(Context context) {\r\n        super(context);\r\n        getHolder().addCallback(this);\r\n        this.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\r\n                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\r\n                | View.SYSTEM_UI_FLAG_FULLSCREEN\r\n                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\r\n        map_clean = BitmapFactory.decodeResource(getResources(), R.drawable.map_state0);\r\n        map_high = BitmapFactory.decodeResource(getResources(), R.drawable.map_state1);\r\n        map_defonce = BitmapFactory.decodeResource(getResources(), R.drawable.map_state2);\r\n\r\n        current_map = map_clean.isMutable() ? map_clean : map_clean.copy(Bitmap.Config.ARGB_8888, true);\r\n\r\n        Bitmap seringue = BitmapFactory.decodeResource(getResources(), R.drawable.bonus);\r\n        bonus = seringue.isMutable() ? seringue : seringue.copy(Bitmap.Config.ARGB_8888, true);\r\n        this.levelThread = new LevelThread(getHolder(), this);\r\n        this.etat = Etat.CLEAN;\r\n        setFocusable(true);\r\n        chronometreGlobal.start();\r\n    }\r\n\r\n    public void update() {\r\n        double futurX = -1;\r\n        double futurY = -1;\r\n        switch (etat) {\r\n            case CLEAN:\r\n                futurX = balle.getCx() + gVector[1];\r\n                futurY = balle.getCy() + gVector[0];\r\n                break;\r\n            case HIGH:\r\n                futurX = balle.getCx() - gVector[1];\r\n                futurY = balle.getCy() - gVector[0];\r\n                break;\r\n            case DEFONCE:\r\n                futurX = balle.getCx() - gVector[1];\r\n                futurY = balle.getCy() + gVector[0];\r\n                break;\r\n        }\r\n\r\n        if(restart){\r\n            if(!demarre){\r\n                chrono.start();\r\n                demarre = true;\r\n            }\r\n        } else {\r\n            chrono.stop();\r\n            demarre = false;\r\n        }\r\n\r\n        if (futurX >= xMax - balle.getRadius() || futurX <= balle.getRadius() ) {\r\n            futurX = balle.getCx();\r\n        }\r\n        if (futurY >= yMax - balle.getRadius() || futurY <= balle.getRadius()) {\r\n            futurY = balle.getCy();\r\n        }\r\n\r\n        balle.setCx((int) futurX);\r\n        balle.setCy((int) futurY);\r\n\r\n        if(chronometreGlobal.getDuree() == 4) {\r\n            etat = Etat.HIGH;\r\n            current_map = map_high.isMutable() ? map_high : map_high.copy(Bitmap.Config.ARGB_8888, true);\r\n\r\n        }\r\n\r\n        if(chronometreGlobal.getDuree() == 8) {\r\n            etat = Etat.DEFONCE;\r\n            current_map = map_defonce.isMutable() ? map_defonce : map_defonce.copy(Bitmap.Config.ARGB_8888, true);\r\n        }\r\n    }\r\n\r\n    private void restart(){\r\n        Intent intent = new Intent(levelGamePlayActivity, EndActivity.class);\r\n        levelGamePlayActivity.startActivity(intent);\r\n    }\r\n\r\n    @Override\r\n    public void draw(Canvas canvas){\r\n        if(canvas != null) {\r\n            super.draw(canvas);\r\n            Paint paint = new Paint();\r\n\r\n            canvas.drawBitmap(current_map, null, new Rect(0, 0, xMax, yMax), paint);\r\n            canvas.drawBitmap(bonus, null, new Rect(400, 400, 450, 450), paint);\r\n            canvas.drawBitmap(bonus, null, new Rect(40, 550, 90, 600), paint);\r\n            paint.setColor(getColorBall());\r\n            canvas.drawCircle(balle.getCx(), balle.getCy(), balle.getRadius(), paint);\r\n\r\n            drawRestart(canvas, paint);\r\n\r\n            Paint paintChrono = new Paint();\r\n            paintChrono.setTextSize(40);\r\n            paintChrono.setColor(Color.RED);\r\n            paintChrono.setFakeBoldText(true);\r\n            textChrono = \"Time : \" + String.valueOf(chronometreGlobal.getDuree());\r\n            canvas.drawText(textChrono, (int)((float)xMax*0.42), (int)((float)yMax*0.065), paintChrono);\r\n        }\r\n    }\r\n\r\n    private int getColorBall(){\r\n        int r = (int) (luminosite*30)%255;\r\n        int g = (int) (luminosite*60)%255;\r\n        int b = (int) (luminosite*90)%255;\r\n        return Color.rgb(r, g, b);\r\n    }\r\n\r\n    @Override\r\n    public void surfaceCreated(SurfaceHolder holder) {\r\n        levelThread.setRunning(true);\r\n        levelThread.start();\r\n    }\r\n\r\n    @Override\r\n    public void surfaceChanged(@NonNull SurfaceHolder holder, int format, int width, int height) { }\r\n\r\n    @Override\r\n    public void surfaceDestroyed(@NonNull SurfaceHolder holder) {\r\n        boolean retry = true;\r\n        while (retry) {\r\n            try {\r\n                levelThread.setRunning(false);\r\n                levelThread.join();\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n            retry = false;\r\n        }\r\n    }\r\n\r\n    private void drawRestart(Canvas canvas, Paint paint){\r\n        if(restart){\r\n            paint.setColor(Color.WHITE);\r\n            paint.setStyle(Paint.Style.STROKE);\r\n            paint.setStrokeWidth(2);\r\n            canvas.drawRect(50, 50, 300, 100, paint);\r\n            paint.setStyle(Paint.Style.FILL);\r\n            paint.setColor(Color.RED);\r\n            long test = chrono.getDuree();\r\n            if (test == 0) {\r\n                canvas.drawRect(50, 50, 100, 100, paint);\r\n            } else if(test == 1){\r\n                canvas.drawRect(50, 50, 200, 100, paint);\r\n            } else if(test == 2){\r\n                canvas.drawRect(50, 50, 300, 100, paint);\r\n            } else if(test == 3)\r\n                restart();\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/level_page/gameplay/LevelView.java	(revision 275a81465b9a5ac8332027dddf96911b90fe764c)
+++ app/src/main/java/level_page/gameplay/LevelView.java	(date 1616162916288)
@@ -28,7 +28,7 @@
 
     public static LevelGamePlayActivity activity;
 
-    private static Balle balle = new Balle(25, 500, 500);
+    private static Balle balle = new Balle(25, 60, 600);
 
     private LevelThread levelThread;
 
@@ -117,13 +117,13 @@
         balle.setCx((int) futurX);
         balle.setCy((int) futurY);
 
-        if(chronometreGlobal.getDuree() == 4) {
+        if(chronometreGlobal.getDuree() == 5) {
             etat = Etat.HIGH;
             current_map = map_high.isMutable() ? map_high : map_high.copy(Bitmap.Config.ARGB_8888, true);
 
         }
 
-        if(chronometreGlobal.getDuree() == 8) {
+        if(chronometreGlobal.getDuree() == 10) {
             etat = Etat.DEFONCE;
             current_map = map_defonce.isMutable() ? map_defonce : map_defonce.copy(Bitmap.Config.ARGB_8888, true);
         }
